// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joekingsleyMukundi/Gatekeeper/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/joekingsleyMukundi/Gatekeeper/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/joekingsleyMukundi/Gatekeeper/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateEmailVerifyToken mocks base method.
func (m *MockStore) CreateEmailVerifyToken(ctx context.Context, arg db.CreateEmailVerifyTokenParams) (db.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailVerifyToken", ctx, arg)
	ret0, _ := ret[0].(db.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailVerifyToken indicates an expected call of CreateEmailVerifyToken.
func (mr *MockStoreMockRecorder) CreateEmailVerifyToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailVerifyToken", reflect.TypeOf((*MockStore)(nil).CreateEmailVerifyToken), ctx, arg)
}

// CreatePasswordResetToken mocks base method.
func (m *MockStore) CreatePasswordResetToken(ctx context.Context, arg db.CreatePasswordResetTokenParams) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePasswordResetToken", ctx, arg)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePasswordResetToken indicates an expected call of CreatePasswordResetToken.
func (mr *MockStoreMockRecorder) CreatePasswordResetToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePasswordResetToken", reflect.TypeOf((*MockStore)(nil).CreatePasswordResetToken), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(ctx context.Context, arg db.CreateUserTxParam) (db.CreateUserTxResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateUserTxResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), ctx, arg)
}

// GetActiveEmailVerifyToken mocks base method.
func (m *MockStore) GetActiveEmailVerifyToken(ctx context.Context, token string) (db.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveEmailVerifyToken", ctx, token)
	ret0, _ := ret[0].(db.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveEmailVerifyToken indicates an expected call of GetActiveEmailVerifyToken.
func (mr *MockStoreMockRecorder) GetActiveEmailVerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveEmailVerifyToken", reflect.TypeOf((*MockStore)(nil).GetActiveEmailVerifyToken), ctx, token)
}

// GetActivePasswordResetToken mocks base method.
func (m *MockStore) GetActivePasswordResetToken(ctx context.Context, token string) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePasswordResetToken", ctx, token)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePasswordResetToken indicates an expected call of GetActivePasswordResetToken.
func (mr *MockStoreMockRecorder) GetActivePasswordResetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePasswordResetToken", reflect.TypeOf((*MockStore)(nil).GetActivePasswordResetToken), ctx, token)
}

// GetEmailVerifyToken mocks base method.
func (m *MockStore) GetEmailVerifyToken(ctx context.Context, token string) (db.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailVerifyToken", ctx, token)
	ret0, _ := ret[0].(db.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailVerifyToken indicates an expected call of GetEmailVerifyToken.
func (mr *MockStoreMockRecorder) GetEmailVerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailVerifyToken", reflect.TypeOf((*MockStore)(nil).GetEmailVerifyToken), ctx, token)
}

// GetPasswordResetToken mocks base method.
func (m *MockStore) GetPasswordResetToken(ctx context.Context, token string) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetToken", ctx, token)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetToken indicates an expected call of GetPasswordResetToken.
func (mr *MockStoreMockRecorder) GetPasswordResetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetToken", reflect.TypeOf((*MockStore)(nil).GetPasswordResetToken), ctx, token)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(ctx context.Context, id uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), ctx, id)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, username)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, arg)
}

// LocateUser mocks base method.
func (m *MockStore) LocateUser(ctx context.Context, email string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateUser", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateUser indicates an expected call of LocateUser.
func (mr *MockStoreMockRecorder) LocateUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateUser", reflect.TypeOf((*MockStore)(nil).LocateUser), ctx, email)
}

// UpdateEmailVerifyToken mocks base method.
func (m *MockStore) UpdateEmailVerifyToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailVerifyToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailVerifyToken indicates an expected call of UpdateEmailVerifyToken.
func (mr *MockStoreMockRecorder) UpdateEmailVerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailVerifyToken", reflect.TypeOf((*MockStore)(nil).UpdateEmailVerifyToken), ctx, token)
}

// UpdatePasswordResetToken mocks base method.
func (m *MockStore) UpdatePasswordResetToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordResetToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordResetToken indicates an expected call of UpdatePasswordResetToken.
func (mr *MockStoreMockRecorder) UpdatePasswordResetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordResetToken", reflect.TypeOf((*MockStore)(nil).UpdatePasswordResetToken), ctx, token)
}

// UpdateSession mocks base method.
func (m *MockStore) UpdateSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockStoreMockRecorder) UpdateSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockStore)(nil).UpdateSession), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}
