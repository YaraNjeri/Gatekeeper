// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_reset_token.sql

package db

import (
	"context"
	"time"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (
    owner,
    token,
    expires_at 
) VALUES (
    $1, $2, $3
)
RETURNING id, owner, token, created_at, expires_at, used_at
`

type CreatePasswordResetTokenParams struct {
	Owner     string    `json:"owner"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetToken, arg.Owner, arg.Token, arg.ExpiresAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const getActivePasswordResetToken = `-- name: GetActivePasswordResetToken :one
SELECT id, owner, token, created_at, expires_at, used_at 
FROM "password_reset_tokens"
WHERE "token" = $1
    AND ("used_at" IS NULL OR "expires_at" < NOW())
`

func (q *Queries) GetActivePasswordResetToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getActivePasswordResetToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, owner, token, created_at, expires_at, used_at FROM password_reset_tokens
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const updatePasswordResetToken = `-- name: UpdatePasswordResetToken :exec
UPDATE password_reset_tokens
SET
    used_at= NOW()
WHERE
    token = $1
`

func (q *Queries) UpdatePasswordResetToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updatePasswordResetToken, token)
	return err
}
